.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
PUSHCONT {
	THROW 51
}
PUSHCONT {
	PUSHINT 1
	SETGLOB 6
}
IFELSE
;; end constructor protection
; Decode input parameters
; Decode owners
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode reqConfirms
LDU 8
ENDS
;; param: owners
;; param: reqConfirms
; constructor MultisigWallet
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
;; get member length
;; push identifier owners
PUSH S1
FIRST
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member length
	;; push identifier owners
	PUSH S1
	FIRST
	;; push identifier MAX_CUSTODIAN_COUNT
	PUSHINT 32
	;; <=
	LEQ
}
IF
THROWIFNOT 117
ACCEPT
;; push identifier owners
PUSH S1
;; push identifier reqConfirms
PUSH S1
;; param: owners
;; param: reqConfirms
; function _initialize
PUSHINT 0
;; decl: ownerCount
; expValue
; end expValue
PUSHINT 0
;; push identifier owners
PUSH S3
;; index
UNPAIR
NIP
PUSHINT 32
DICTUGET
THROWIFNOT 50
PLDU 256
; colValue
SETGLOB 10
; end colValue
;; get member length
;; push identifier owners
PUSH S2
FIRST
;; decl: len
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; push identifier len
	PUSH S2
	;; <
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier ownerCount
		PUSH S2
		;; push identifier MAX_CUSTODIAN_COUNT
		PUSHINT 32
		;; <
		LESS
	}
	IF
}
PUSHCONT {
	;; push identifier i
	DUP
	;; push identifier owners
	PUSH S5
	;; index
	UNPAIR
	NIP
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	;; decl: key
	;; if
	;; !
	;; map.exists
	;; push identifier key
	DUP
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	DUP
	PUSHCONT {
		NIP
	}
	IF
	NOT
	PUSHCONT {
		;; ++
		; expValue
		PUSH S3
		; end expValue
		DUP
		INC
		; colValue
		POP s5
		; end colValue
		; expValue
		;; fetch m_custodians
		GETGLOB 13
		;; push identifier key
		PUSH S2
		SWAP
		; end expValue
		BLKSWAP 1, 2
		; colValue
		NEWC
		STU 8
		ROTREV
		PUSHINT 256
		DICTUSETB
		SETGLOB 13
		; end colValue
	}
	IF
	;; end if
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
;; push identifier reqConfirms
PUSH S3
;; <=
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier reqConfirms
	PUSH S2
}
IFELSE
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
PUSHINT 2
;; <=
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
	PUSHINT 2
	;; *
	MUL
	PUSHINT 1
	;; +
	ADD
	PUSHINT 3
	;; /
	DIV
}
IFELSE
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
; colValue
SETGLOB 14
; end colValue
BLKDROP 4
; end function _initialize
DROP2
; end constructor MultisigWallet
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	acceptTransfer
.public	acceptTransfer
.type	acceptTransfer, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode payload
LDREF
ENDS
;; param: payload
; function acceptTransfer
;; emit TransferAccepted
NEWC
PUSHINT $TransferAccepted$
PUSHINT 2147483647
AND
STUR 32
;; payload
;; push identifier payload
PUSH S1
STREFR
CALL $send_external_message_macro$
DROP
; end function acceptTransfer
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	acceptTransfer_internal
.type	acceptTransfer_internal, @function
;; param: payload
; function acceptTransfer
;; emit TransferAccepted
NEWC
PUSHINT $TransferAccepted$
PUSHINT 2147483647
AND
STUR 32
;; payload
;; push identifier payload
PUSH S1
STREFR
CALL $send_external_message_macro$
DROP
; end function acceptTransfer

.globl	sendTransaction
.public	sendTransaction
.type	sendTransaction, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode dest
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode value
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode bounce
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode flags
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
; Decode payload
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
; function sendTransaction
;; push identifier m_custodianCount
GETGLOB 14
EQINT 1
THROWIFNOT 108
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; push identifier m_ownerKey
GETGLOB 10
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
;; transfer()
;; push identifier value
PUSH S3
;; push identifier dest
PUSH S5
;; push identifier bounce
PUSH S4
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
SWAP
STGRAMS
PUSHINT 106
STZEROES
;; push identifier payload
PUSH S1
CTOS
NEWC
STSLICE
SWAP
; merge body and builder
PUSH S1
BBITS
PUSH S1
BREMBITS
GREATER
PUSHCONT {
	STSLICECONST 1
	STBREF
}
PUSHCONT {
	STSLICECONST 0
	STB
}
IFELSE
ENDC
;; push identifier flags
PUSH S2
SENDRAWMSG
BLKDROP 5
; end function sendTransaction
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	sendTransaction_internal
.type	sendTransaction_internal, @function
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
; function sendTransaction
;; push identifier m_custodianCount
GETGLOB 14
EQINT 1
THROWIFNOT 108
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; push identifier m_ownerKey
GETGLOB 10
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
;; transfer()
;; push identifier value
PUSH S3
;; push identifier dest
PUSH S5
;; push identifier bounce
PUSH S4
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
SWAP
STGRAMS
PUSHINT 106
STZEROES
;; push identifier payload
PUSH S1
CTOS
NEWC
STSLICE
SWAP
; merge body and builder
PUSH S1
BBITS
PUSH S1
BREMBITS
GREATER
PUSHCONT {
	STSLICECONST 1
	STBREF
}
PUSHCONT {
	STSLICECONST 0
	STB
}
IFELSE
ENDC
;; push identifier flags
PUSH S2
SENDRAWMSG
BLKDROP 5
; end function sendTransaction

.globl	submitTransaction
.public	submitTransaction
.type	submitTransaction, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode dest
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode value
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode bounce
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode allBalance
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode payload
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: allBalance
;; param: payload
; function submitTransaction
;; ret param: transId
PUSHINT 0
PUSHCONT {
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	;; decl: senderKey
	;; push identifier senderKey
	DUP
	;; param: senderKey
	; function _findCustodian
	;; map.fetch
	;; push identifier senderKey
	DUP
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	DUP
	PUSHCONT {
		SWAP
		PLDU 8
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	;; decl: exists
	;; decl: index
	;; push identifier exists
	PUSH S1
	THROWIFNOT 100
	;; return
	NIP
	NIP
	; end function _findCustodian
	;; decl: index
	;; push identifier value
	PUSH S6
	;; push identifier MIN_VALUE
	PUSHINT 1000000
	;; >=
	GEQ
	THROWIFNOT 107
	;; push identifier payload
	PUSH S3
	CTOS
	NULL
	SWAP
	PUSHINT 0
	PUSHINT 1 ; null s b r
	PUSHCONT {
	    ; null s... b r
		PUSH S2 ; null s... b r s
		SREFS   ; null s... b r cntRef
		PUSHCONT {
			; null s... b r
			ROT         ; null s... b r s
			LDREFRTOS   ; null s... b r s' new_s
			SWAP2       ; null s... s' new_s b r
			INC
		}
		PUSHCONT {
			; null s... b r
			XCHG S2 ; null s... r b s
			SBITS   ; null s... r b bs
			ADD     ; null s... r b
			SWAP    ; null s... b r
		}
		IFELSE
		PUSH S2
		ISNULL
	}
	UNTIL
	; null b r
	ROT  ; b r null
	DROP ; b r
	;; decl: bits
	;; decl: cells
	;; push identifier bits
	PUSH S1
	PUSHINT 8192
	;; <
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier cells
		DUP
		LESSINT 8
	}
	IF
	THROWIFNOT 121
	PUSHCONT {
		; function _removeExpiredTransactions
		; function _getExpirationBound
		;; return
		;; push identifier now
		NOW
		;; uint64
		UFITS 64
		;; push identifier EXPIRATION_TIME
		PUSHINT 3600
		;; -
		SUB
		PUSHINT 32
		;; <<
		LSHIFT
		; end function _getExpirationBound
		;; decl: marker
		;; map.min
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUMIN
		PUSHCONT {
			SWAP
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDU 128
			LDU 16
			LDREF
			PLDI 1
			TUPLE 11
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
			PUSHINT 0
			PUSHINT 0
			NEWC
			ENDC
			PUSHINT 0
			TUPLE 11
			FALSE
		}
		IFELSE
		;; decl: trId
		;; decl: txn
		;; decl: success
		;; push identifier success
		DUP
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier trId
			PUSH S2
			;; push identifier marker
			PUSH S4
			;; <=
			LEQ
		}
		IF
		;; decl: needCleanup
		;; if
		;; !
		;; push identifier needCleanup
		DUP
		NOT
		PUSHCONT {
			;; return
			BLKDROP 5
			RET
		}
		IFJMP
		;; end if
		ACCEPT
		PUSHINT 0
		;; decl: i
		; while
		PUSHCONT {
			;; push identifier needCleanup
			PUSH S1
			;; short-circuiting &&
			DUP
			PUSHCONT {
				DROP
				;; push identifier i
				DUP
				;; push identifier MAX_CLEANUP_TXNS
				PUSHINT 40
				;; <
				LESS
			}
			IF
		}
		PUSHCONT {
			;; ++
			; expValue
			; end expValue
			INC
			; colValue
			; end colValue
			;; push identifier m_requestsMask
			GETGLOB 11
			;; get member index
			;; push identifier txn
			PUSH S4
			INDEX 5
			;; param: mask
			;; param: index
			; function _decMaskValue
			;; return
			;; push identifier mask
			PUSH S1
			PUSHINT 1
			PUSHINT 8
			;; push identifier index
			PUSH S3
			;; *
			MUL
			;; <<
			LSHIFT
			;; -
			SUB
			NIP
			NIP
			; end function _decMaskValue
			; expValue
			; end expValue
			; colValue
			SETGLOB 11
			; end colValue
			;; delete
			; expValue
			;; fetch m_transactions
			GETGLOB 12
			;; push identifier trId
			PUSH S5
			SWAP
			; end expValue
			PUSH S1
			SWAP
			PUSHINT 64
			DICTUDEL
			DROP
			; colValue
			NIP
			SETGLOB 12
			; end colValue
			;; map.next
			;; push identifier trId
			PUSH S4
			;; push identifier m_transactions
			GETGLOB 12
			PUSHINT 64
			DICTUGETNEXT
			PUSHCONT {
				SWAP
				LDU 64
				LDU 32
				LDU 8
				LDU 8
				LDU 256
				LDU 8
				LDMSGADDR
				LDU 128
				LDU 16
				LDREF
				PLDI 1
				TUPLE 11
				TRUE
			}
			PUSHCONT {
				PUSHINT 0
				PUSHINT 0
				PUSHINT 0
				PUSHINT 0
				PUSHINT 0
				PUSHINT 0
				PUSHINT 0
				PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
				PUSHINT 0
				PUSHINT 0
				NEWC
				ENDC
				PUSHINT 0
				TUPLE 11
				FALSE
			}
			IFELSE
			XCHG s2
			; expValue
			; end expValue
			; colValue
			POP s7
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP s5
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP s3
			; end colValue
			; expValue
			; end expValue
			;; push identifier success
			PUSH S2
			;; short-circuiting &&
			DUP
			PUSHCONT {
				DROP
				;; push identifier trId
				PUSH S4
				;; push identifier marker
				PUSH S6
				;; <=
				LEQ
			}
			IF
			; colValue
			POP s2
			; end colValue
		}
		WHILE
		; end while
		CALL $c7_to_c4$
		COMMIT
		BLKDROP 6
		; end function _removeExpiredTransactions
	}
	CALLX
	;; push identifier m_requestsMask
	GETGLOB 11
	;; push identifier index
	PUSH S3
	;; param: mask
	;; param: index
	; function _getMaskValue
	;; return
	;; push identifier mask
	PUSH S1
	PUSHINT 8
	;; push identifier index
	PUSH S2
	;; *
	MUL
	;; >>
	RSHIFT
	PUSHINT 255
	;; &
	AND
	;; uint8
	UFITS 8
	NIP
	NIP
	; end function _getMaskValue
	;; push identifier MAX_QUEUED_REQUESTS
	PUSHINT 5
	;; <
	LESS
	THROWIFNOT 113
	ACCEPT
	;; push identifier value
	PUSH S8
	;; push identifier allBalance
	PUSH S7
	;; param: value
	;; param: allBalance
	; function _getSendFlags
	;; push identifier FLAG_IGNORE_ERRORS
	PUSHINT 2
	;; push identifier FLAG_PAY_FWD_FEE_FROM_BALANCE
	PUSHINT 1
	;; |
	OR
	;; decl: flags
	;; if
	;; push identifier allBalance
	PUSH S1
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier FLAG_IGNORE_ERRORS
		PUSHINT 2
		;; push identifier FLAG_SEND_ALL_REMAINING
		PUSHINT 128
		;; |
		OR
		; colValue
		NIP
		; end colValue
		;; get member balance
		GETPARAM 7
		INDEX 0
		;; uint128
		UFITS 128
		; expValue
		; end expValue
		; colValue
		POP s3
		; end colValue
	}
	IF
	;; end if
	;; return
	;; push identifier flags
	DUP
	;; push identifier value
	PUSH S3
	BLKSWAP 3, 2
	BLKDROP 3
	; end function _getSendFlags
	;; decl: flags
	;; decl: realValue
	;; push identifier m_defaultRequiredConfirmations
	GETGLOB 18
	;; decl: requiredSigns
	;; if
	;; push identifier requiredSigns
	DUP
	EQINT 1
	PUSHCONT {
		;; transfer()
		;; push identifier realValue
		PUSH S1
		;; push identifier dest
		PUSH S13
		;; push identifier bounce
		PUSH S12
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		SWAP
		STGRAMS
		PUSHINT 106
		STZEROES
		;; push identifier payload
		PUSH S9
		CTOS
		NEWC
		STSLICE
		SWAP
		; merge body and builder
		PUSH S1
		BBITS
		PUSH S1
		BREMBITS
		GREATER
		PUSHCONT {
			STSLICECONST 1
			STBREF
		}
		PUSHCONT {
			STSLICECONST 0
			STB
		}
		IFELSE
		ENDC
		;; push identifier flags
		PUSH S3
		SENDRAWMSG
		;; return
		BLKDROP 13
		PUSHINT 0
		RET
	}
	PUSHCONT {
		;; push identifier m_requestsMask
		GETGLOB 11
		;; push identifier index
		PUSH S6
		;; param: mask
		;; param: index
		; function _incMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		PUSHINT 1
		PUSHINT 8
		;; push identifier index
		PUSH S3
		;; *
		MUL
		;; <<
		LSHIFT
		;; +
		ADD
		NIP
		NIP
		; end function _incMaskValue
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		; function _generateId
		;; return
		;; push identifier now
		NOW
		;; uint64
		UFITS 64
		PUSHINT 32
		;; <<
		LSHIFT
		LTIME
		PUSHINT 4294967295
		;; &
		AND
		;; |
		OR
		; end function _generateId
		;; decl: trId
		;; push identifier trId
		DUP
		PUSHINT 0
		;; push identifier requiredSigns
		PUSH S3
		PUSHINT 0
		;; push identifier senderKey
		PUSH S11
		;; push identifier index
		PUSH S11
		;; push identifier dest
		PUSH S19
		;; push identifier realValue
		PUSH S9
		;; push identifier flags
		PUSH S11
		;; push identifier payload
		PUSH S18
		;; push identifier bounce
		PUSH S21
		TUPLE 11
		;; decl: txn
		;; push identifier trId
		PUSH S1
		;; push identifier txn
		PUSH S1
		;; push identifier index
		PUSH S9
		;; param: transactionId
		;; param: txn
		;; param: custodianIndex
		; function _confirmTransaction
		;; if
		;; get member signsReceived
		;; push identifier txn
		PUSH S1
		INDEX 3
		PUSHINT 1
		;; +
		ADD
		;; get member signsRequired
		;; push identifier txn
		PUSH S2
		INDEX 2
		;; >=
		GEQ
		PUSHCONT {
			;; transfer()
			;; get member value
			;; push identifier txn
			PUSH S1
			INDEX 7
			;; get member dest
			;; push identifier txn
			PUSH S2
			INDEX 6
			;; get member bounce
			;; push identifier txn
			PUSH S3
			INDEX 10
			NEWC
			STSLICECONST x6_
			STI 1
			PUSHINT 3
			STZEROES
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 106
			STZEROES
			;; get member payload
			;; push identifier txn
			PUSH S2
			INDEX 9
			CTOS
			NEWC
			STSLICE
			SWAP
			; merge body and builder
			PUSH S1
			BBITS
			PUSH S1
			BREMBITS
			GREATER
			PUSHCONT {
				STSLICECONST 1
				STBREF
			}
			PUSHCONT {
				STSLICECONST 0
				STB
			}
			IFELSE
			ENDC
			;; get member sendFlags
			;; push identifier txn
			PUSH S2
			INDEX 8
			SENDRAWMSG
			;; push identifier m_requestsMask
			GETGLOB 11
			;; get member index
			;; push identifier txn
			PUSH S2
			INDEX 5
			;; param: mask
			;; param: index
			; function _decMaskValue
			;; return
			;; push identifier mask
			PUSH S1
			PUSHINT 1
			PUSHINT 8
			;; push identifier index
			PUSH S3
			;; *
			MUL
			;; <<
			LSHIFT
			;; -
			SUB
			NIP
			NIP
			; end function _decMaskValue
			; expValue
			; end expValue
			; colValue
			SETGLOB 11
			; end colValue
			;; delete
			; expValue
			;; fetch m_transactions
			GETGLOB 12
			;; push identifier transactionId
			PUSH S3
			SWAP
			; end expValue
			PUSH S1
			SWAP
			PUSHINT 64
			DICTUDEL
			DROP
			; colValue
			NIP
			SETGLOB 12
			; end colValue
		}
		PUSHCONT {
			;; get member confirmationsMask
			;; push identifier txn
			PUSH S1
			INDEX 1
			;; push identifier custodianIndex
			PUSH S1
			;; param: mask
			;; param: custodianIndex
			; function _setConfirmed
			PUSHINT 1
			;; uint32
			UFITS 32
			;; push identifier custodianIndex
			PUSH S1
			;; <<
			LSHIFT
			; expValue
			PUSH S2
			; end expValue
			SWAP
			OR
			; colValue
			POP s2
			; end colValue
			;; return
			;; push identifier mask
			PUSH S1
			NIP
			NIP
			; end function _setConfirmed
			; expValue
			PUSH S2
			; end expValue
			SWAP
			; colValue
			SETINDEX 1
			POP s2
			; end colValue
			;; ++
			; expValue
			PUSH S1
			DUP
			INDEX 3
			; end expValue
			INC
			; colValue
			SETINDEX 3
			POP s2
			; end colValue
			; expValue
			;; fetch m_transactions
			GETGLOB 12
			;; push identifier transactionId
			PUSH S3
			SWAP
			; end expValue
			;; push identifier txn
			PUSH S3
			; colValue
			UNTUPLE 11
			NEWC
			PUSH S11
			STUR 64
			PUSH S10
			STUR 32
			PUSH S9
			STUR 8
			PUSH S8
			STUR 8
			PUSH S7
			STUR 256
			PUSH S6
			STUR 8
			PUSH S5
			STSLICER
			PUSH S4
			STUR 128
			PUSH S3
			STUR 16
			PUSH S2
			STREFR
			PUSH S1
			STIR 1
			XCHG s11
			BLKDROP 11
			ROTREV
			PUSHINT 64
			DICTUSETB
			SETGLOB 12
			; end colValue
		}
		IFELSE
		;; end if
		BLKDROP 3
		; end function _confirmTransaction
		;; return
		;; push identifier trId
		PUSH S1
		XCHG s15
		BLKDROP 15
		RET
	}
	CONDSEL
	JMPX
	;; end if
}
CALLX
;; emitting 1 value(s)
NEWC
PUSHINT $submitTransaction$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
STUR 64
CALL $send_external_message_macro$
DROP
; end function submitTransaction
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	submitTransaction_internal
.type	submitTransaction_internal, @function
;; param: dest
;; param: value
;; param: bounce
;; param: allBalance
;; param: payload
; function submitTransaction
;; ret param: transId
PUSHINT 0
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; decl: senderKey
;; push identifier senderKey
DUP
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
;; push identifier value
PUSH S6
;; push identifier MIN_VALUE
PUSHINT 1000000
;; >=
GEQ
THROWIFNOT 107
;; push identifier payload
PUSH S3
CTOS
NULL
SWAP
PUSHINT 0
PUSHINT 1 ; null s b r
PUSHCONT {
    ; null s... b r
	PUSH S2 ; null s... b r s
	SREFS   ; null s... b r cntRef
	PUSHCONT {
		; null s... b r
		ROT         ; null s... b r s
		LDREFRTOS   ; null s... b r s' new_s
		SWAP2       ; null s... s' new_s b r
		INC
	}
	PUSHCONT {
		; null s... b r
		XCHG S2 ; null s... r b s
		SBITS   ; null s... r b bs
		ADD     ; null s... r b
		SWAP    ; null s... b r
	}
	IFELSE
	PUSH S2
	ISNULL
}
UNTIL
; null b r
ROT  ; b r null
DROP ; b r
;; decl: bits
;; decl: cells
;; push identifier bits
PUSH S1
PUSHINT 8192
;; <
LESS
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier cells
	DUP
	LESSINT 8
}
IF
THROWIFNOT 121
PUSHCONT {
	; function _removeExpiredTransactions
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	;; decl: trId
	;; decl: txn
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier trId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	PUSHINT 0
	;; decl: i
	; while
	PUSHCONT {
		;; push identifier needCleanup
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier i
			DUP
			;; push identifier MAX_CLEANUP_TXNS
			PUSHINT 40
			;; <
			LESS
		}
		IF
	}
	PUSHCONT {
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
		;; push identifier m_requestsMask
		GETGLOB 11
		;; get member index
		;; push identifier txn
		PUSH S4
		INDEX 5
		;; param: mask
		;; param: index
		; function _decMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		PUSHINT 1
		PUSHINT 8
		;; push identifier index
		PUSH S3
		;; *
		MUL
		;; <<
		LSHIFT
		;; -
		SUB
		NIP
		NIP
		; end function _decMaskValue
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		;; delete
		; expValue
		;; fetch m_transactions
		GETGLOB 12
		;; push identifier trId
		PUSH S5
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 12
		; end colValue
		;; map.next
		;; push identifier trId
		PUSH S4
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDU 128
			LDU 16
			LDREF
			PLDI 1
			TUPLE 11
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
			PUSHINT 0
			PUSHINT 0
			NEWC
			ENDC
			PUSHINT 0
			TUPLE 11
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s7
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s3
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S2
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier trId
			PUSH S4
			;; push identifier marker
			PUSH S6
			;; <=
			LEQ
		}
		IF
		; colValue
		POP s2
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 6
	; end function _removeExpiredTransactions
}
CALLX
;; push identifier m_requestsMask
GETGLOB 11
;; push identifier index
PUSH S3
;; param: mask
;; param: index
; function _getMaskValue
;; return
;; push identifier mask
PUSH S1
PUSHINT 8
;; push identifier index
PUSH S2
;; *
MUL
;; >>
RSHIFT
PUSHINT 255
;; &
AND
;; uint8
UFITS 8
NIP
NIP
; end function _getMaskValue
;; push identifier MAX_QUEUED_REQUESTS
PUSHINT 5
;; <
LESS
THROWIFNOT 113
ACCEPT
;; push identifier value
PUSH S8
;; push identifier allBalance
PUSH S7
;; param: value
;; param: allBalance
; function _getSendFlags
;; push identifier FLAG_IGNORE_ERRORS
PUSHINT 2
;; push identifier FLAG_PAY_FWD_FEE_FROM_BALANCE
PUSHINT 1
;; |
OR
;; decl: flags
;; if
;; push identifier allBalance
PUSH S1
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier FLAG_IGNORE_ERRORS
	PUSHINT 2
	;; push identifier FLAG_SEND_ALL_REMAINING
	PUSHINT 128
	;; |
	OR
	; colValue
	NIP
	; end colValue
	;; get member balance
	GETPARAM 7
	INDEX 0
	;; uint128
	UFITS 128
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
}
IF
;; end if
;; return
;; push identifier flags
DUP
;; push identifier value
PUSH S3
BLKSWAP 3, 2
BLKDROP 3
; end function _getSendFlags
;; decl: flags
;; decl: realValue
;; push identifier m_defaultRequiredConfirmations
GETGLOB 18
;; decl: requiredSigns
;; if
;; push identifier requiredSigns
DUP
EQINT 1
PUSHCONT {
	;; transfer()
	;; push identifier realValue
	PUSH S1
	;; push identifier dest
	PUSH S13
	;; push identifier bounce
	PUSH S12
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 106
	STZEROES
	;; push identifier payload
	PUSH S9
	CTOS
	NEWC
	STSLICE
	SWAP
	; merge body and builder
	PUSH S1
	BBITS
	PUSH S1
	BREMBITS
	GREATER
	PUSHCONT {
		STSLICECONST 1
		STBREF
	}
	PUSHCONT {
		STSLICECONST 0
		STB
	}
	IFELSE
	ENDC
	;; push identifier flags
	PUSH S3
	SENDRAWMSG
	;; return
	BLKDROP 13
	PUSHINT 0
	RET
}
PUSHCONT {
	;; push identifier m_requestsMask
	GETGLOB 11
	;; push identifier index
	PUSH S6
	;; param: mask
	;; param: index
	; function _incMaskValue
	;; return
	;; push identifier mask
	PUSH S1
	PUSHINT 1
	PUSHINT 8
	;; push identifier index
	PUSH S3
	;; *
	MUL
	;; <<
	LSHIFT
	;; +
	ADD
	NIP
	NIP
	; end function _incMaskValue
	; expValue
	; end expValue
	; colValue
	SETGLOB 11
	; end colValue
	; function _generateId
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	PUSHINT 32
	;; <<
	LSHIFT
	LTIME
	PUSHINT 4294967295
	;; &
	AND
	;; |
	OR
	; end function _generateId
	;; decl: trId
	;; push identifier trId
	DUP
	PUSHINT 0
	;; push identifier requiredSigns
	PUSH S3
	PUSHINT 0
	;; push identifier senderKey
	PUSH S11
	;; push identifier index
	PUSH S11
	;; push identifier dest
	PUSH S19
	;; push identifier realValue
	PUSH S9
	;; push identifier flags
	PUSH S11
	;; push identifier payload
	PUSH S18
	;; push identifier bounce
	PUSH S21
	TUPLE 11
	;; decl: txn
	;; push identifier trId
	PUSH S1
	;; push identifier txn
	PUSH S1
	;; push identifier index
	PUSH S9
	;; param: transactionId
	;; param: txn
	;; param: custodianIndex
	; function _confirmTransaction
	;; if
	;; get member signsReceived
	;; push identifier txn
	PUSH S1
	INDEX 3
	PUSHINT 1
	;; +
	ADD
	;; get member signsRequired
	;; push identifier txn
	PUSH S2
	INDEX 2
	;; >=
	GEQ
	PUSHCONT {
		;; transfer()
		;; get member value
		;; push identifier txn
		PUSH S1
		INDEX 7
		;; get member dest
		;; push identifier txn
		PUSH S2
		INDEX 6
		;; get member bounce
		;; push identifier txn
		PUSH S3
		INDEX 10
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		SWAP
		STGRAMS
		PUSHINT 106
		STZEROES
		;; get member payload
		;; push identifier txn
		PUSH S2
		INDEX 9
		CTOS
		NEWC
		STSLICE
		SWAP
		; merge body and builder
		PUSH S1
		BBITS
		PUSH S1
		BREMBITS
		GREATER
		PUSHCONT {
			STSLICECONST 1
			STBREF
		}
		PUSHCONT {
			STSLICECONST 0
			STB
		}
		IFELSE
		ENDC
		;; get member sendFlags
		;; push identifier txn
		PUSH S2
		INDEX 8
		SENDRAWMSG
		;; push identifier m_requestsMask
		GETGLOB 11
		;; get member index
		;; push identifier txn
		PUSH S2
		INDEX 5
		;; param: mask
		;; param: index
		; function _decMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		PUSHINT 1
		PUSHINT 8
		;; push identifier index
		PUSH S3
		;; *
		MUL
		;; <<
		LSHIFT
		;; -
		SUB
		NIP
		NIP
		; end function _decMaskValue
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		;; delete
		; expValue
		;; fetch m_transactions
		GETGLOB 12
		;; push identifier transactionId
		PUSH S3
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 12
		; end colValue
	}
	PUSHCONT {
		;; get member confirmationsMask
		;; push identifier txn
		PUSH S1
		INDEX 1
		;; push identifier custodianIndex
		PUSH S1
		;; param: mask
		;; param: custodianIndex
		; function _setConfirmed
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier custodianIndex
		PUSH S1
		;; <<
		LSHIFT
		; expValue
		PUSH S2
		; end expValue
		SWAP
		OR
		; colValue
		POP s2
		; end colValue
		;; return
		;; push identifier mask
		PUSH S1
		NIP
		NIP
		; end function _setConfirmed
		; expValue
		PUSH S2
		; end expValue
		SWAP
		; colValue
		SETINDEX 1
		POP s2
		; end colValue
		;; ++
		; expValue
		PUSH S1
		DUP
		INDEX 3
		; end expValue
		INC
		; colValue
		SETINDEX 3
		POP s2
		; end colValue
		; expValue
		;; fetch m_transactions
		GETGLOB 12
		;; push identifier transactionId
		PUSH S3
		SWAP
		; end expValue
		;; push identifier txn
		PUSH S3
		; colValue
		UNTUPLE 11
		NEWC
		PUSH S11
		STUR 64
		PUSH S10
		STUR 32
		PUSH S9
		STUR 8
		PUSH S8
		STUR 8
		PUSH S7
		STUR 256
		PUSH S6
		STUR 8
		PUSH S5
		STSLICER
		PUSH S4
		STUR 128
		PUSH S3
		STUR 16
		PUSH S2
		STREFR
		PUSH S1
		STIR 1
		XCHG s11
		BLKDROP 11
		ROTREV
		PUSHINT 64
		DICTUSETB
		SETGLOB 12
		; end colValue
	}
	IFELSE
	;; end if
	BLKDROP 3
	; end function _confirmTransaction
	;; return
	;; push identifier trId
	PUSH S1
	XCHG s15
	BLKDROP 15
	RET
}
CONDSEL
JMPX
;; end if
; end function submitTransaction

.globl	confirmTransaction
.public	confirmTransaction
.type	confirmTransaction, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode transactionId
LDU 64
ENDS
;; param: transactionId
; function confirmTransaction
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
PUSHCONT {
	; function _removeExpiredTransactions
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	;; decl: trId
	;; decl: txn
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier trId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	PUSHINT 0
	;; decl: i
	; while
	PUSHCONT {
		;; push identifier needCleanup
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier i
			DUP
			;; push identifier MAX_CLEANUP_TXNS
			PUSHINT 40
			;; <
			LESS
		}
		IF
	}
	PUSHCONT {
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
		;; push identifier m_requestsMask
		GETGLOB 11
		;; get member index
		;; push identifier txn
		PUSH S4
		INDEX 5
		;; param: mask
		;; param: index
		; function _decMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		PUSHINT 1
		PUSHINT 8
		;; push identifier index
		PUSH S3
		;; *
		MUL
		;; <<
		LSHIFT
		;; -
		SUB
		NIP
		NIP
		; end function _decMaskValue
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		;; delete
		; expValue
		;; fetch m_transactions
		GETGLOB 12
		;; push identifier trId
		PUSH S5
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 12
		; end colValue
		;; map.next
		;; push identifier trId
		PUSH S4
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDU 128
			LDU 16
			LDREF
			PLDI 1
			TUPLE 11
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
			PUSHINT 0
			PUSHINT 0
			NEWC
			ENDC
			PUSHINT 0
			TUPLE 11
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s7
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s3
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S2
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier trId
			PUSH S4
			;; push identifier marker
			PUSH S6
			;; <=
			LEQ
		}
		IF
		; colValue
		POP s2
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 6
	; end function _removeExpiredTransactions
}
CALLX
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: trexists
;; decl: txn
;; push identifier trexists
PUSH S1
THROWIFNOT 102
;; !
;; get member confirmationsMask
;; push identifier txn
DUP
INDEX 1
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
NOT
THROWIFNOT 103
ACCEPT
;; push identifier transactionId
PUSH S3
;; push identifier txn
PUSH S1
;; push identifier index
PUSH S4
;; param: transactionId
;; param: txn
;; param: custodianIndex
; function _confirmTransaction
;; if
;; get member signsReceived
;; push identifier txn
PUSH S1
INDEX 3
PUSHINT 1
;; +
ADD
;; get member signsRequired
;; push identifier txn
PUSH S2
INDEX 2
;; >=
GEQ
PUSHCONT {
	;; transfer()
	;; get member value
	;; push identifier txn
	PUSH S1
	INDEX 7
	;; get member dest
	;; push identifier txn
	PUSH S2
	INDEX 6
	;; get member bounce
	;; push identifier txn
	PUSH S3
	INDEX 10
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 106
	STZEROES
	;; get member payload
	;; push identifier txn
	PUSH S2
	INDEX 9
	CTOS
	NEWC
	STSLICE
	SWAP
	; merge body and builder
	PUSH S1
	BBITS
	PUSH S1
	BREMBITS
	GREATER
	PUSHCONT {
		STSLICECONST 1
		STBREF
	}
	PUSHCONT {
		STSLICECONST 0
		STB
	}
	IFELSE
	ENDC
	;; get member sendFlags
	;; push identifier txn
	PUSH S2
	INDEX 8
	SENDRAWMSG
	;; push identifier m_requestsMask
	GETGLOB 11
	;; get member index
	;; push identifier txn
	PUSH S2
	INDEX 5
	;; param: mask
	;; param: index
	; function _decMaskValue
	;; return
	;; push identifier mask
	PUSH S1
	PUSHINT 1
	PUSHINT 8
	;; push identifier index
	PUSH S3
	;; *
	MUL
	;; <<
	LSHIFT
	;; -
	SUB
	NIP
	NIP
	; end function _decMaskValue
	; expValue
	; end expValue
	; colValue
	SETGLOB 11
	; end colValue
	;; delete
	; expValue
	;; fetch m_transactions
	GETGLOB 12
	;; push identifier transactionId
	PUSH S3
	SWAP
	; end expValue
	PUSH S1
	SWAP
	PUSHINT 64
	DICTUDEL
	DROP
	; colValue
	NIP
	SETGLOB 12
	; end colValue
}
PUSHCONT {
	;; get member confirmationsMask
	;; push identifier txn
	PUSH S1
	INDEX 1
	;; push identifier custodianIndex
	PUSH S1
	;; param: mask
	;; param: custodianIndex
	; function _setConfirmed
	PUSHINT 1
	;; uint32
	UFITS 32
	;; push identifier custodianIndex
	PUSH S1
	;; <<
	LSHIFT
	; expValue
	PUSH S2
	; end expValue
	SWAP
	OR
	; colValue
	POP s2
	; end colValue
	;; return
	;; push identifier mask
	PUSH S1
	NIP
	NIP
	; end function _setConfirmed
	; expValue
	PUSH S2
	; end expValue
	SWAP
	; colValue
	SETINDEX 1
	POP s2
	; end colValue
	;; ++
	; expValue
	PUSH S1
	DUP
	INDEX 3
	; end expValue
	INC
	; colValue
	SETINDEX 3
	POP s2
	; end colValue
	; expValue
	;; fetch m_transactions
	GETGLOB 12
	;; push identifier transactionId
	PUSH S3
	SWAP
	; end expValue
	;; push identifier txn
	PUSH S3
	; colValue
	UNTUPLE 11
	NEWC
	PUSH S11
	STUR 64
	PUSH S10
	STUR 32
	PUSH S9
	STUR 8
	PUSH S8
	STUR 8
	PUSH S7
	STUR 256
	PUSH S6
	STUR 8
	PUSH S5
	STSLICER
	PUSH S4
	STUR 128
	PUSH S3
	STUR 16
	PUSH S2
	STREFR
	PUSH S1
	STIR 1
	XCHG s11
	BLKDROP 11
	ROTREV
	PUSHINT 64
	DICTUSETB
	SETGLOB 12
	; end colValue
}
IFELSE
;; end if
BLKDROP 3
; end function _confirmTransaction
BLKDROP 4
; end function confirmTransaction
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmTransaction_internal
.type	confirmTransaction_internal, @function
;; param: transactionId
; function confirmTransaction
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
PUSHCONT {
	; function _removeExpiredTransactions
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	;; decl: trId
	;; decl: txn
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier trId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	PUSHINT 0
	;; decl: i
	; while
	PUSHCONT {
		;; push identifier needCleanup
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier i
			DUP
			;; push identifier MAX_CLEANUP_TXNS
			PUSHINT 40
			;; <
			LESS
		}
		IF
	}
	PUSHCONT {
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
		;; push identifier m_requestsMask
		GETGLOB 11
		;; get member index
		;; push identifier txn
		PUSH S4
		INDEX 5
		;; param: mask
		;; param: index
		; function _decMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		PUSHINT 1
		PUSHINT 8
		;; push identifier index
		PUSH S3
		;; *
		MUL
		;; <<
		LSHIFT
		;; -
		SUB
		NIP
		NIP
		; end function _decMaskValue
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		;; delete
		; expValue
		;; fetch m_transactions
		GETGLOB 12
		;; push identifier trId
		PUSH S5
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 12
		; end colValue
		;; map.next
		;; push identifier trId
		PUSH S4
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDU 128
			LDU 16
			LDREF
			PLDI 1
			TUPLE 11
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
			PUSHINT 0
			PUSHINT 0
			NEWC
			ENDC
			PUSHINT 0
			TUPLE 11
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s7
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s3
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S2
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier trId
			PUSH S4
			;; push identifier marker
			PUSH S6
			;; <=
			LEQ
		}
		IF
		; colValue
		POP s2
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 6
	; end function _removeExpiredTransactions
}
CALLX
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: trexists
;; decl: txn
;; push identifier trexists
PUSH S1
THROWIFNOT 102
;; !
;; get member confirmationsMask
;; push identifier txn
DUP
INDEX 1
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
NOT
THROWIFNOT 103
ACCEPT
;; push identifier transactionId
PUSH S3
;; push identifier txn
PUSH S1
;; push identifier index
PUSH S4
;; param: transactionId
;; param: txn
;; param: custodianIndex
; function _confirmTransaction
;; if
;; get member signsReceived
;; push identifier txn
PUSH S1
INDEX 3
PUSHINT 1
;; +
ADD
;; get member signsRequired
;; push identifier txn
PUSH S2
INDEX 2
;; >=
GEQ
PUSHCONT {
	;; transfer()
	;; get member value
	;; push identifier txn
	PUSH S1
	INDEX 7
	;; get member dest
	;; push identifier txn
	PUSH S2
	INDEX 6
	;; get member bounce
	;; push identifier txn
	PUSH S3
	INDEX 10
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 106
	STZEROES
	;; get member payload
	;; push identifier txn
	PUSH S2
	INDEX 9
	CTOS
	NEWC
	STSLICE
	SWAP
	; merge body and builder
	PUSH S1
	BBITS
	PUSH S1
	BREMBITS
	GREATER
	PUSHCONT {
		STSLICECONST 1
		STBREF
	}
	PUSHCONT {
		STSLICECONST 0
		STB
	}
	IFELSE
	ENDC
	;; get member sendFlags
	;; push identifier txn
	PUSH S2
	INDEX 8
	SENDRAWMSG
	;; push identifier m_requestsMask
	GETGLOB 11
	;; get member index
	;; push identifier txn
	PUSH S2
	INDEX 5
	;; param: mask
	;; param: index
	; function _decMaskValue
	;; return
	;; push identifier mask
	PUSH S1
	PUSHINT 1
	PUSHINT 8
	;; push identifier index
	PUSH S3
	;; *
	MUL
	;; <<
	LSHIFT
	;; -
	SUB
	NIP
	NIP
	; end function _decMaskValue
	; expValue
	; end expValue
	; colValue
	SETGLOB 11
	; end colValue
	;; delete
	; expValue
	;; fetch m_transactions
	GETGLOB 12
	;; push identifier transactionId
	PUSH S3
	SWAP
	; end expValue
	PUSH S1
	SWAP
	PUSHINT 64
	DICTUDEL
	DROP
	; colValue
	NIP
	SETGLOB 12
	; end colValue
}
PUSHCONT {
	;; get member confirmationsMask
	;; push identifier txn
	PUSH S1
	INDEX 1
	;; push identifier custodianIndex
	PUSH S1
	;; param: mask
	;; param: custodianIndex
	; function _setConfirmed
	PUSHINT 1
	;; uint32
	UFITS 32
	;; push identifier custodianIndex
	PUSH S1
	;; <<
	LSHIFT
	; expValue
	PUSH S2
	; end expValue
	SWAP
	OR
	; colValue
	POP s2
	; end colValue
	;; return
	;; push identifier mask
	PUSH S1
	NIP
	NIP
	; end function _setConfirmed
	; expValue
	PUSH S2
	; end expValue
	SWAP
	; colValue
	SETINDEX 1
	POP s2
	; end colValue
	;; ++
	; expValue
	PUSH S1
	DUP
	INDEX 3
	; end expValue
	INC
	; colValue
	SETINDEX 3
	POP s2
	; end colValue
	; expValue
	;; fetch m_transactions
	GETGLOB 12
	;; push identifier transactionId
	PUSH S3
	SWAP
	; end expValue
	;; push identifier txn
	PUSH S3
	; colValue
	UNTUPLE 11
	NEWC
	PUSH S11
	STUR 64
	PUSH S10
	STUR 32
	PUSH S9
	STUR 8
	PUSH S8
	STUR 8
	PUSH S7
	STUR 256
	PUSH S6
	STUR 8
	PUSH S5
	STSLICER
	PUSH S4
	STUR 128
	PUSH S3
	STUR 16
	PUSH S2
	STREFR
	PUSH S1
	STIR 1
	XCHG s11
	BLKDROP 11
	ROTREV
	PUSHINT 64
	DICTUSETB
	SETGLOB 12
	; end colValue
}
IFELSE
;; end if
BLKDROP 3
; end function _confirmTransaction
BLKDROP 4
; end function confirmTransaction

.globl	isConfirmed
.public	isConfirmed
.type	isConfirmed, @function
; Decode input parameters
; Decode mask
LDU 32
; Decode index
LDU 8
ENDS
;; param: mask
;; param: index
; function isConfirmed
;; ret param: confirmed
PUSHINT 0
;; push identifier mask
PUSH S2
;; push identifier index
PUSH S2
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
; expValue
; end expValue
; colValue
NIP
; end colValue
;; returning named params
BLKSWAP 2, 1
DROP2
;; emitting 1 value(s)
NEWC
PUSHINT $isConfirmed$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
STIR 1
CALL $send_external_message_macro$
DROP
; end function isConfirmed
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	isConfirmed_internal
.type	isConfirmed_internal, @function
;; param: mask
;; param: index
; function isConfirmed
;; ret param: confirmed
PUSHINT 0
;; push identifier mask
PUSH S2
;; push identifier index
PUSH S2
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
; expValue
; end expValue
; colValue
NIP
; end colValue
;; returning named params
BLKSWAP 2, 1
DROP2
; end function isConfirmed

.globl	getParameters
.public	getParameters
.type	getParameters, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getParameters
;; ret param: maxQueuedTransactions
PUSHINT 0
;; ret param: maxCustodianCount
PUSHINT 0
;; ret param: expirationTime
PUSHINT 0
;; ret param: minValue
PUSHINT 0
;; ret param: requiredTxnConfirms
PUSHINT 0
;; ret param: requiredUpdConfirms
PUSHINT 0
; expValue
; end expValue
;; push identifier MAX_QUEUED_REQUESTS
PUSHINT 5
; colValue
POP s6
; end colValue
; expValue
; end expValue
;; push identifier MAX_CUSTODIAN_COUNT
PUSHINT 32
; colValue
POP s5
; end colValue
; expValue
; end expValue
;; push identifier EXPIRATION_TIME
PUSHINT 3600
; colValue
POP s4
; end colValue
; expValue
; end expValue
;; push identifier MIN_VALUE
PUSHINT 1000000
; colValue
POP s3
; end colValue
; expValue
; end expValue
;; push identifier m_defaultRequiredConfirmations
GETGLOB 18
; colValue
POP s2
; end colValue
; expValue
; end expValue
;; push identifier m_requiredVotes
GETGLOB 17
; colValue
NIP
; end colValue
;; returning named params
;; emitting 6 value(s)
NEWC
PUSHINT $getParameters$
PUSHINT 2147483648
OR
STUR 32
PUSH S6
STUR 8
PUSH S5
STUR 8
PUSH S4
STUR 64
PUSH S3
STUR 128
PUSH S2
STUR 8
PUSH S1
STUR 8
CALL $send_external_message_macro$
BLKDROP 6
; end function getParameters
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getParameters_internal
.type	getParameters_internal, @function
; function getParameters
;; ret param: maxQueuedTransactions
PUSHINT 0
;; ret param: maxCustodianCount
PUSHINT 0
;; ret param: expirationTime
PUSHINT 0
;; ret param: minValue
PUSHINT 0
;; ret param: requiredTxnConfirms
PUSHINT 0
;; ret param: requiredUpdConfirms
PUSHINT 0
; expValue
; end expValue
;; push identifier MAX_QUEUED_REQUESTS
PUSHINT 5
; colValue
POP s6
; end colValue
; expValue
; end expValue
;; push identifier MAX_CUSTODIAN_COUNT
PUSHINT 32
; colValue
POP s5
; end colValue
; expValue
; end expValue
;; push identifier EXPIRATION_TIME
PUSHINT 3600
; colValue
POP s4
; end colValue
; expValue
; end expValue
;; push identifier MIN_VALUE
PUSHINT 1000000
; colValue
POP s3
; end colValue
; expValue
; end expValue
;; push identifier m_defaultRequiredConfirmations
GETGLOB 18
; colValue
POP s2
; end colValue
; expValue
; end expValue
;; push identifier m_requiredVotes
GETGLOB 17
; colValue
NIP
; end colValue
;; returning named params
; end function getParameters

.globl	getTransaction
.public	getTransaction
.type	getTransaction, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode transactionId
LDU 64
ENDS
;; param: transactionId
; function getTransaction
;; ret param: trans
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
PUSHINT 0
NEWC
ENDC
PUSHINT 0
TUPLE 11
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: txn
;; push identifier exists
PUSH S1
THROWIFNOT 102
; expValue
; end expValue
;; push identifier txn
DUP
; colValue
POP s3
; end colValue
;; returning named params
BLKSWAP 1, 3
BLKDROP 3
;; emitting 1 value(s)
NEWC
PUSHINT $getTransaction$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
UNTUPLE 11
BLKSWAP 1, 11
PUSH S11
STUR 64
PUSH S10
STUR 32
PUSH S9
STUR 8
PUSH S8
STUR 8
PUSH S7
STUR 256
PUSH S6
STUR 8
PUSH S5
STSLICER
PUSH S4
STUR 128
PUSH S3
STUR 16
PUSH S2
STREFR
PUSH S1
STIR 1
XCHG s11
BLKDROP 11
CALL $send_external_message_macro$
DROP
; end function getTransaction
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getTransaction_internal
.type	getTransaction_internal, @function
;; param: transactionId
; function getTransaction
;; ret param: trans
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
PUSHINT 0
NEWC
ENDC
PUSHINT 0
TUPLE 11
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: txn
;; push identifier exists
PUSH S1
THROWIFNOT 102
; expValue
; end expValue
;; push identifier txn
DUP
; colValue
POP s3
; end colValue
;; returning named params
BLKSWAP 1, 3
BLKDROP 3
; end function getTransaction

.globl	getTransactions
.public	getTransactions
.type	getTransactions, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getTransactions
;; ret param: transactions
PUSHINT 0
NEWDICT
PAIR
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
;; push identifier EXPIRATION_TIME
PUSHINT 3600
;; -
SUB
PUSHINT 32
;; <<
LSHIFT
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHINT 0
	NEWC
	ENDC
	PUSHINT 0
	TUPLE 11
	FALSE
}
IFELSE
;; decl: id
;; decl: txn
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	;; if
	;; push identifier id
	PUSH S2
	;; push identifier bound
	PUSH S4
	;; >
	GREATER
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		;; push identifier txn
		PUSH S2
		;; array.push(..)
		UNTUPLE 11
		NEWC
		PUSH S11
		STUR 64
		PUSH S10
		STUR 32
		PUSH S9
		STUR 8
		PUSH S8
		STUR 8
		PUSH S7
		STUR 256
		PUSH S6
		STUR 8
		PUSH S5
		STSLICER
		PUSH S4
		STUR 128
		PUSH S3
		STUR 16
		PUSH S2
		STREFR
		PUSH S1
		STIR 1
		XCHG s11
		BLKDROP 11
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP s5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier id
	PUSH S2
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 4
;; emitting 1 value(s)
NEWC
PUSHINT $getTransactions$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
UNPAIR
XCHG s2
STU 32
STDICT
CALL $send_external_message_macro$
DROP
; end function getTransactions
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getTransactions_internal
.type	getTransactions_internal, @function
; function getTransactions
;; ret param: transactions
PUSHINT 0
NEWDICT
PAIR
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
;; push identifier EXPIRATION_TIME
PUSHINT 3600
;; -
SUB
PUSHINT 32
;; <<
LSHIFT
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHINT 0
	NEWC
	ENDC
	PUSHINT 0
	TUPLE 11
	FALSE
}
IFELSE
;; decl: id
;; decl: txn
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	;; if
	;; push identifier id
	PUSH S2
	;; push identifier bound
	PUSH S4
	;; >
	GREATER
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		;; push identifier txn
		PUSH S2
		;; array.push(..)
		UNTUPLE 11
		NEWC
		PUSH S11
		STUR 64
		PUSH S10
		STUR 32
		PUSH S9
		STUR 8
		PUSH S8
		STUR 8
		PUSH S7
		STUR 256
		PUSH S6
		STUR 8
		PUSH S5
		STSLICER
		PUSH S4
		STUR 128
		PUSH S3
		STUR 16
		PUSH S2
		STREFR
		PUSH S1
		STIR 1
		XCHG s11
		BLKDROP 11
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP s5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier id
	PUSH S2
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 4
; end function getTransactions

.globl	getTransactionIds
.public	getTransactionIds
.type	getTransactionIds, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getTransactionIds
;; ret param: ids
PUSHINT 0
NEWDICT
PAIR
PUSHINT 0
;; decl: trId
FALSE
;; decl: success
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHINT 0
	NEWC
	ENDC
	PUSHINT 0
	TUPLE 11
	FALSE
}
IFELSE
XCHG s2
; expValue
; end expValue
; colValue
POP s4
; end colValue
DROP
; expValue
; end expValue
; colValue
NIP
; end colValue
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	; expValue
	PUSH S2
	; end expValue
	;; push identifier trId
	PUSH S2
	;; array.push(..)
	NEWC
	STU 64
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP s3
	; end colValue
	;; map.next
	;; push identifier trId
	PUSH S1
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s4
	; end colValue
	DROP
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
DROP2
;; emitting 1 value(s)
NEWC
PUSHINT $getTransactionIds$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
UNPAIR
XCHG s2
STU 32
STDICT
CALL $send_external_message_macro$
DROP
; end function getTransactionIds
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getTransactionIds_internal
.type	getTransactionIds_internal, @function
; function getTransactionIds
;; ret param: ids
PUSHINT 0
NEWDICT
PAIR
PUSHINT 0
;; decl: trId
FALSE
;; decl: success
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 32
	LDU 8
	LDU 8
	LDU 256
	LDU 8
	LDMSGADDR
	LDU 128
	LDU 16
	LDREF
	PLDI 1
	TUPLE 11
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHINT 0
	NEWC
	ENDC
	PUSHINT 0
	TUPLE 11
	FALSE
}
IFELSE
XCHG s2
; expValue
; end expValue
; colValue
POP s4
; end colValue
DROP
; expValue
; end expValue
; colValue
NIP
; end colValue
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	; expValue
	PUSH S2
	; end expValue
	;; push identifier trId
	PUSH S2
	;; array.push(..)
	NEWC
	STU 64
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP s3
	; end colValue
	;; map.next
	;; push identifier trId
	PUSH S1
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDU 128
		LDU 16
		LDREF
		PLDI 1
		TUPLE 11
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 11
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s4
	; end colValue
	DROP
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
DROP2
; end function getTransactionIds

.globl	getCustodians
.public	getCustodians
.type	getCustodians, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getCustodians
;; ret param: custodians
PUSHINT 0
NEWDICT
PAIR
;; map.min
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUMIN
PUSHCONT {
	SWAP
	PLDU 8
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	FALSE
}
IFELSE
;; decl: key
;; decl: index
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	; expValue
	PUSH S3
	; end expValue
	;; push identifier index
	PUSH S2
	;; push identifier key
	PUSH S4
	TUPLE 2
	;; array.push(..)
	UNTUPLE 2
	NEWC
	PUSH S2
	STUR 8
	PUSH S1
	STUR 256
	NIP
	NIP
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP s4
	; end colValue
	;; map.next
	;; push identifier key
	PUSH S2
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		PLDU 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 3
;; emitting 1 value(s)
NEWC
PUSHINT $getCustodians$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
UNPAIR
XCHG s2
STU 32
STDICT
CALL $send_external_message_macro$
DROP
; end function getCustodians
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getCustodians_internal
.type	getCustodians_internal, @function
; function getCustodians
;; ret param: custodians
PUSHINT 0
NEWDICT
PAIR
;; map.min
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUMIN
PUSHCONT {
	SWAP
	PLDU 8
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	FALSE
}
IFELSE
;; decl: key
;; decl: index
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	; expValue
	PUSH S3
	; end expValue
	;; push identifier index
	PUSH S2
	;; push identifier key
	PUSH S4
	TUPLE 2
	;; array.push(..)
	UNTUPLE 2
	NEWC
	PUSH S2
	STUR 8
	PUSH S1
	STUR 256
	NIP
	NIP
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP s4
	; end colValue
	;; map.next
	;; push identifier key
	PUSH S2
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		PLDU 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 3
; end function getCustodians

.globl	submitUpdate
.public	submitUpdate
.type	submitUpdate, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode codeHash
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owners
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode reqConfirms
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
ENDS
;; param: codeHash
;; param: owners
;; param: reqConfirms
; function submitUpdate
;; ret param: updateId
PUSHINT 0
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; decl: sender
;; push identifier sender
DUP
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
;; get member length
;; push identifier owners
PUSH S4
FIRST
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member length
	;; push identifier owners
	PUSH S4
	FIRST
	;; push identifier MAX_CUSTODIAN_COUNT
	PUSHINT 32
	;; <=
	LEQ
}
IF
THROWIFNOT 117
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; !
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
PUSH S1
;; param: mask
;; param: custodianIndex
; function _isSubmitted
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isSubmitted
NOT
THROWIFNOT 113
ACCEPT
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
PUSH S1
;; param: mask
;; param: custodianIndex
; function _setSubmitted
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
NIP
NIP
; end function _setSubmitted
; expValue
; end expValue
; colValue
SETGLOB 16
; end colValue
; function _generateId
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
PUSHINT 32
;; <<
LSHIFT
LTIME
PUSHINT 4294967295
;; &
AND
;; |
OR
; end function _generateId
; expValue
; end expValue
; colValue
POP s3
; end colValue
;; push identifier updateId
PUSH S2
;; push identifier index
PUSH S1
PUSHINT 0
PUSHINT 0
;; push identifier sender
PUSH S5
;; push identifier codeHash
PUSH S10
;; push identifier owners
PUSH S10
;; push identifier reqConfirms
PUSH S10
TUPLE 8
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S4
SWAP
; end expValue
BLKSWAP 1, 2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
;; push identifier updateId
PUSH S2
;; push identifier index
PUSH S1
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
;; index
PUSHINT 64
DICTUGET
PUSHCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
; expValue
PUSH S1
; end expValue
SWAP
; colValue
SETINDEX 3
NIP
; end colValue
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S3
SWAP
; end expValue
;; push identifier request
PUSH S2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
BLKDROP 3
; end function _confirmUpdate
;; returning named params
BLKSWAP 3, 3
BLKDROP 5
;; emitting 1 value(s)
NEWC
PUSHINT $submitUpdate$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
STUR 64
CALL $send_external_message_macro$
DROP
; end function submitUpdate
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	submitUpdate_internal
.type	submitUpdate_internal, @function
;; param: codeHash
;; param: owners
;; param: reqConfirms
; function submitUpdate
;; ret param: updateId
PUSHINT 0
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; decl: sender
;; push identifier sender
DUP
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
;; get member length
;; push identifier owners
PUSH S4
FIRST
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member length
	;; push identifier owners
	PUSH S4
	FIRST
	;; push identifier MAX_CUSTODIAN_COUNT
	PUSHINT 32
	;; <=
	LEQ
}
IF
THROWIFNOT 117
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; !
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
PUSH S1
;; param: mask
;; param: custodianIndex
; function _isSubmitted
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isSubmitted
NOT
THROWIFNOT 113
ACCEPT
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
PUSH S1
;; param: mask
;; param: custodianIndex
; function _setSubmitted
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
NIP
NIP
; end function _setSubmitted
; expValue
; end expValue
; colValue
SETGLOB 16
; end colValue
; function _generateId
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
PUSHINT 32
;; <<
LSHIFT
LTIME
PUSHINT 4294967295
;; &
AND
;; |
OR
; end function _generateId
; expValue
; end expValue
; colValue
POP s3
; end colValue
;; push identifier updateId
PUSH S2
;; push identifier index
PUSH S1
PUSHINT 0
PUSHINT 0
;; push identifier sender
PUSH S5
;; push identifier codeHash
PUSH S10
;; push identifier owners
PUSH S10
;; push identifier reqConfirms
PUSH S10
TUPLE 8
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S4
SWAP
; end expValue
BLKSWAP 1, 2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
;; push identifier updateId
PUSH S2
;; push identifier index
PUSH S1
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
;; index
PUSHINT 64
DICTUGET
PUSHCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
; expValue
PUSH S1
; end expValue
SWAP
; colValue
SETINDEX 3
NIP
; end colValue
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S3
SWAP
; end expValue
;; push identifier request
PUSH S2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
BLKDROP 3
; end function _confirmUpdate
;; returning named params
BLKSWAP 3, 3
BLKDROP 5
; end function submitUpdate

.globl	confirmUpdate
.public	confirmUpdate
.type	confirmUpdate, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode updateId
LDU 64
ENDS
;; param: updateId
; function confirmUpdate
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: request
;; push identifier exists
PUSH S1
THROWIFNOT 115
;; !
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
NOT
THROWIFNOT 116
ACCEPT
;; push identifier updateId
PUSH S3
;; push identifier index
PUSH S3
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
;; index
PUSHINT 64
DICTUGET
PUSHCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
; expValue
PUSH S1
; end expValue
SWAP
; colValue
SETINDEX 3
NIP
; end colValue
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S3
SWAP
; end expValue
;; push identifier request
PUSH S2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
BLKDROP 3
; end function _confirmUpdate
BLKDROP 4
; end function confirmUpdate
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmUpdate_internal
.type	confirmUpdate_internal, @function
;; param: updateId
; function confirmUpdate
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	SWAP
	PLDU 8
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; decl: exists
;; decl: index
;; push identifier exists
PUSH S1
THROWIFNOT 100
;; return
NIP
NIP
; end function _findCustodian
;; decl: index
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: request
;; push identifier exists
PUSH S1
THROWIFNOT 115
;; !
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
PUSH S1
;; push identifier custodianIndex
PUSH S1
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
PUSH S1
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S2
;; <<
LSHIFT
;; &
AND
NEQINT 0
NIP
NIP
; end function _checkBit
NIP
NIP
; end function _isConfirmed
NOT
THROWIFNOT 116
ACCEPT
;; push identifier updateId
PUSH S3
;; push identifier index
PUSH S3
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
;; index
PUSHINT 64
DICTUGET
PUSHCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
UFITS 32
;; push identifier custodianIndex
PUSH S1
;; <<
LSHIFT
; expValue
PUSH S2
; end expValue
SWAP
OR
; colValue
POP s2
; end colValue
;; return
;; push identifier mask
PUSH S1
NIP
NIP
; end function _setConfirmed
; expValue
PUSH S1
; end expValue
SWAP
; colValue
SETINDEX 3
NIP
; end colValue
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S3
SWAP
; end expValue
;; push identifier request
PUSH S2
; colValue
UNTUPLE 8
NEWC
PUSH S8
STUR 64
PUSH S7
STUR 8
PUSH S6
STUR 8
PUSH S5
STUR 32
PUSH S4
STUR 256
PUSH S3
STUR 256
PUSH S2
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S1
STUR 8
XCHG s8
BLKDROP 8
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
BLKDROP 3
; end function _confirmUpdate
BLKDROP 4
; end function confirmUpdate

.globl	executeUpdate
.public	executeUpdate
.type	executeUpdate, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode updateId
LDU 64
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: updateId
;; param: code
; function executeUpdate
;; map.exists
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	NIP
}
IF
THROWIFNOT 100
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: request
;; push identifier exists
PUSH S1
THROWIFNOT 115
;; push identifier code
PUSH S2
HASHCU
;; get member codeHash
;; push identifier request
PUSH S1
INDEX 5
;; ==
EQUAL
THROWIFNOT 119
;; get member signs
;; push identifier request
DUP
INDEX 2
;; push identifier m_requiredVotes
GETGLOB 17
;; >=
GEQ
THROWIFNOT 120
ACCEPT
;; push identifier updateId
PUSH S3
;; get member index
;; push identifier request
PUSH S1
INDEX 1
;; param: updateId
;; param: index
; function _deleteUpdateRequest
;; ~
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S1
;; <<
LSHIFT
PUSHPOW2DEC 32
SUBR
; expValue
;; fetch m_updateRequestsMask
GETGLOB 16
; end expValue
SWAP
AND
; colValue
SETGLOB 16
; end colValue
;; delete
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 64
DICTUDEL
DROP
; colValue
NIP
SETGLOB 15
; end colValue
DROP2
; end function _deleteUpdateRequest
;; push identifier code
PUSH S2
SETCODE
;; push identifier code
PUSH S2
CTOS
BLESS
POP c3
;; get member custodians
;; push identifier request
DUP
INDEX 6
;; get member reqConfirms
;; push identifier request
PUSH S1
INDEX 7
CALL $:onCodeUpgrade$
BLKDROP 4
; end function executeUpdate
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	executeUpdate_internal
.type	executeUpdate_internal, @function
;; param: updateId
;; param: code
; function executeUpdate
;; map.exists
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	NIP
}
IF
THROWIFNOT 100
PUSHCONT {
	; function _removeExpiredUpdateRequests
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	UFITS 64
	;; push identifier EXPIRATION_TIME
	PUSHINT 3600
	;; -
	SUB
	PUSHINT 32
	;; <<
	LSHIFT
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	;; decl: updateId
	;; decl: req
	;; decl: success
	;; push identifier success
	DUP
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier updateId
		PUSH S2
		;; push identifier marker
		PUSH S4
		;; <=
		LEQ
	}
	IF
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	NOT
	PUSHCONT {
		;; return
		BLKDROP 5
		RET
	}
	IFJMP
	;; end if
	ACCEPT
	; while
	PUSHCONT {
		;; push identifier needCleanup
		DUP
	}
	PUSHCONT {
		;; push identifier updateId
		PUSH S3
		;; get member index
		;; push identifier req
		PUSH S3
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		UFITS 32
		;; push identifier index
		PUSH S1
		;; <<
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		SWAP
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		GETGLOB 15
		;; push identifier updateId
		PUSH S2
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 64
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		DROP2
		; end function _deleteUpdateRequest
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		PUSHCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			PLDU 8
			TUPLE 8
			TRUE
		}
		PUSHCONT {
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			PUSHINT 0
			NEWDICT
			PAIR
			PUSHINT 0
			TUPLE 8
			FALSE
		}
		IFELSE
		XCHG s2
		; expValue
		; end expValue
		; colValue
		POP s6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s4
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP s2
		; end colValue
		; expValue
		; end expValue
		;; push identifier success
		PUSH S1
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier updateId
			PUSH S3
			;; push identifier marker
			PUSH S5
			;; <=
			LEQ
		}
		IF
		; colValue
		NIP
		; end colValue
	}
	WHILE
	; end while
	CALL $c7_to_c4$
	COMMIT
	BLKDROP 5
	; end function _removeExpiredUpdateRequests
}
CALLX
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
DUP
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
}
PUSHCONT {
	NULL
}
IFELSE
;; decl: exists
;; decl: request
;; push identifier exists
PUSH S1
THROWIFNOT 115
;; push identifier code
PUSH S2
HASHCU
;; get member codeHash
;; push identifier request
PUSH S1
INDEX 5
;; ==
EQUAL
THROWIFNOT 119
;; get member signs
;; push identifier request
DUP
INDEX 2
;; push identifier m_requiredVotes
GETGLOB 17
;; >=
GEQ
THROWIFNOT 120
ACCEPT
;; push identifier updateId
PUSH S3
;; get member index
;; push identifier request
PUSH S1
INDEX 1
;; param: updateId
;; param: index
; function _deleteUpdateRequest
;; ~
PUSHINT 1
;; uint32
UFITS 32
;; push identifier index
PUSH S1
;; <<
LSHIFT
PUSHPOW2DEC 32
SUBR
; expValue
;; fetch m_updateRequestsMask
GETGLOB 16
; end expValue
SWAP
AND
; colValue
SETGLOB 16
; end colValue
;; delete
; expValue
;; fetch m_updateRequests
GETGLOB 15
;; push identifier updateId
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 64
DICTUDEL
DROP
; colValue
NIP
SETGLOB 15
; end colValue
DROP2
; end function _deleteUpdateRequest
;; push identifier code
PUSH S2
SETCODE
;; push identifier code
PUSH S2
CTOS
BLESS
POP c3
;; get member custodians
;; push identifier request
DUP
INDEX 6
;; get member reqConfirms
;; push identifier request
PUSH S1
INDEX 7
CALL $:onCodeUpgrade$
BLKDROP 4
; end function executeUpdate

.globl	getUpdateRequests
.public	getUpdateRequests
.type	getUpdateRequests, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getUpdateRequests
;; ret param: updates
PUSHINT 0
NEWDICT
PAIR
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
;; push identifier EXPIRATION_TIME
PUSHINT 3600
;; -
SUB
PUSHINT 32
;; <<
LSHIFT
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
	FALSE
}
IFELSE
;; decl: updateId
;; decl: req
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	;; if
	;; push identifier updateId
	PUSH S2
	;; push identifier bound
	PUSH S4
	;; >
	GREATER
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		;; push identifier req
		PUSH S2
		;; array.push(..)
		UNTUPLE 8
		NEWC
		PUSH S8
		STUR 64
		PUSH S7
		STUR 8
		PUSH S6
		STUR 8
		PUSH S5
		STUR 32
		PUSH S4
		STUR 256
		PUSH S3
		STUR 256
		PUSH S2
		UNPAIR
		ROTREV
		STUR 32
		STDICT
		PUSH S1
		STUR 8
		XCHG s8
		BLKDROP 8
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP s5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier updateId
	PUSH S2
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 4
;; emitting 1 value(s)
NEWC
PUSHINT $getUpdateRequests$
PUSHINT 2147483648
OR
STUR 32
PUSH S1
UNPAIR
XCHG s2
STU 32
STDICT
CALL $send_external_message_macro$
DROP
; end function getUpdateRequests
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getUpdateRequests_internal
.type	getUpdateRequests_internal, @function
; function getUpdateRequests
;; ret param: updates
PUSHINT 0
NEWDICT
PAIR
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
UFITS 64
;; push identifier EXPIRATION_TIME
PUSHINT 3600
;; -
SUB
PUSHINT 32
;; <<
LSHIFT
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUMIN
PUSHCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	PLDU 8
	TUPLE 8
	TRUE
}
PUSHCONT {
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
	FALSE
}
IFELSE
;; decl: updateId
;; decl: req
;; decl: success
; while
PUSHCONT {
	;; push identifier success
	DUP
}
PUSHCONT {
	;; if
	;; push identifier updateId
	PUSH S2
	;; push identifier bound
	PUSH S4
	;; >
	GREATER
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		;; push identifier req
		PUSH S2
		;; array.push(..)
		UNTUPLE 8
		NEWC
		PUSH S8
		STUR 64
		PUSH S7
		STUR 8
		PUSH S6
		STUR 8
		PUSH S5
		STUR 32
		PUSH S4
		STUR 256
		PUSH S3
		STUR 256
		PUSH S2
		UNPAIR
		ROTREV
		STUR 32
		STDICT
		PUSH S1
		STUR 8
		XCHG s8
		BLKDROP 8
		SWAP
		UNPAIR
		PUSH S1
		INC
		XCHG s3
		ROTREV
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP s5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier updateId
	PUSH S2
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	PUSHCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		PLDU 8
		TUPLE 8
		TRUE
	}
	PUSHCONT {
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		NEWDICT
		PAIR
		PUSHINT 0
		TUPLE 8
		FALSE
	}
	IFELSE
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP s5
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP s3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
;; returning named params
BLKDROP 4
; end function getUpdateRequests

.internal-alias :onCodeUpgrade,        2
.internal	:onCodeUpgrade
;; param: newOwners
;; param: reqConfirms
; function onCodeUpgrade
;; set default state vars
PUSHINT 0
SETGLOB 10
PUSHINT 0
SETGLOB 11
NEWDICT
SETGLOB 12
NEWDICT
SETGLOB 13
PUSHINT 0
SETGLOB 14
NEWDICT
SETGLOB 15
PUSHINT 0
SETGLOB 16
PUSHINT 0
SETGLOB 17
PUSHINT 0
SETGLOB 18
;; end set default state vars
;; push identifier newOwners
PUSH S1
;; push identifier reqConfirms
PUSH S1
;; param: owners
;; param: reqConfirms
; function _initialize
PUSHINT 0
;; decl: ownerCount
; expValue
; end expValue
PUSHINT 0
;; push identifier owners
PUSH S3
;; index
UNPAIR
NIP
PUSHINT 32
DICTUGET
THROWIFNOT 50
PLDU 256
; colValue
SETGLOB 10
; end colValue
;; get member length
;; push identifier owners
PUSH S2
FIRST
;; decl: len
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; push identifier len
	PUSH S2
	;; <
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier ownerCount
		PUSH S2
		;; push identifier MAX_CUSTODIAN_COUNT
		PUSHINT 32
		;; <
		LESS
	}
	IF
}
PUSHCONT {
	;; push identifier i
	DUP
	;; push identifier owners
	PUSH S5
	;; index
	UNPAIR
	NIP
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	;; decl: key
	;; if
	;; !
	;; map.exists
	;; push identifier key
	DUP
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	DUP
	PUSHCONT {
		NIP
	}
	IF
	NOT
	PUSHCONT {
		;; ++
		; expValue
		PUSH S3
		; end expValue
		DUP
		INC
		; colValue
		POP s5
		; end colValue
		; expValue
		;; fetch m_custodians
		GETGLOB 13
		;; push identifier key
		PUSH S2
		SWAP
		; end expValue
		BLKSWAP 1, 2
		; colValue
		NEWC
		STU 8
		ROTREV
		PUSHINT 256
		DICTUSETB
		SETGLOB 13
		; end colValue
	}
	IF
	;; end if
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
;; push identifier reqConfirms
PUSH S3
;; <=
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier reqConfirms
	PUSH S2
}
IFELSE
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
PUSHINT 2
;; <=
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
	PUSHINT 2
	;; *
	MUL
	PUSHINT 1
	;; +
	ADD
	PUSHINT 3
	;; /
	DIV
}
IFELSE
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
; colValue
SETGLOB 14
; end colValue
BLKDROP 4
; end function _initialize
DROP2
; end function onCodeUpgrade
CALL $c7_to_c4$
COMMIT
THROW 0

.globl	TransferAccepted
.type	TransferAccepted, @function

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
}
IF

.macro	c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 15
SWAP
STDICT
GETGLOB 10
GETGLOB 11
GETGLOB 14
GETGLOB 16
GETGLOB 17
GETGLOB 18
GETGLOB 12
GETGLOB 13
REVERSE 10, 0
STBREF
STU 256
STU 256
STU 8
STU 32
STU 8
STU 8
STDICT
STDICT
ENDC
POP C4

.macro	c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
PLDDICT
SETGLOB 15
LDU 256
LDU 256
LDU 8
LDU 32
LDU 8
LDU 8
LDDICT
PLDDICT
SETGLOB 13
SETGLOB 12
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 14
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro	c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	PLDDICT
	SETGLOB 15
	LDU 256
	LDU 256
	LDU 8
	LDU 32
	LDU 8
	LDU 8
	LDDICT
	PLDDICT
	SETGLOB 13
	SETGLOB 12
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 14
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init m_ownerKey
	PUSHINT 0
	SETGLOB 10
	; init m_requestsMask
	PUSHINT 0
	SETGLOB 11
	; init m_transactions
	NEWDICT
	SETGLOB 12
	; init m_custodians
	NEWDICT
	SETGLOB 13
	; init m_custodianCount
	PUSHINT 0
	SETGLOB 14
	; init m_updateRequests
	NEWDICT
	SETGLOB 15
	; init m_updateRequestsMask
	PUSHINT 0
	SETGLOB 16
	; init m_requiredVotes
	PUSHINT 0
	SETGLOB 17
	; init m_defaultRequiredConfirmations
	PUSHINT 0
	SETGLOB 18
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: inbound_message
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S1    ; body
SEMPTY     ; isEmpty
PUSHCONT {
	PUSH S2     ; inbound_message
	CTOS        ; inbound_message
	PUSHINT 3   ; inbound_message 3
	SDSKIPFIRST ; inbound_message'
	PLDU 1      ; bounced
	EQINT 1     ; bounced==1
	PUSHCONT {
	}
	PUSHCONT {
	}
	IFELSE
}
IFJMP
PUSH S1            ; body
LDUQ 32            ; [funcId] body' ok
PUSHCONT {
}
IFNOTJMP
PUSH2 S1,S1        ; funcId body' funcId funcId
EQINT 0            ; funcId body' funcId funcId==0
PUSHCONT {
}
IFJMP
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
}
IFJMP
SWAP  ; bodyLen body' funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
}
IF

